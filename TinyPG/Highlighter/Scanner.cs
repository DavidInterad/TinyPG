// Generated by TinyPG v1.4

using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Xml.Serialization;

namespace TinyPG.Highlighter
{
    #region Scanner

    public class Scanner
    {
        public string Input;
        public int StartPos;
        public int EndPos;
        public string CurrentFile;
        public int CurrentLine;
        public int CurrentColumn;
        public int CurrentPosition;
        public List<Token> Skipped; // tokens that were skipped
        public Dictionary<TokenType, Regex> Patterns;

        private Token _lookAheadToken;
        private readonly List<TokenType> _tokens;
        private readonly List<TokenType> _skipList; // tokens to be skipped

        public Scanner()
        {
            Regex regex;
            Patterns = new Dictionary<TokenType, Regex>();
            _tokens = new List<TokenType>();
            _lookAheadToken = null;
            Skipped = new List<Token>();

            _skipList = new List<TokenType>();
            _skipList.Add(TokenType.WHITESPACE);

            regex = new Regex(@"\s+", RegexOptions.Compiled);
            Patterns.Add(TokenType.WHITESPACE, regex);
            _tokens.Add(TokenType.WHITESPACE);

            regex = new Regex(@"^$", RegexOptions.Compiled);
            Patterns.Add(TokenType.EOF, regex);
            _tokens.Add(TokenType.EOF);

            regex = new Regex(@"//[^\n]*\n?", RegexOptions.Compiled);
            Patterns.Add(TokenType.GRAMMARCOMMENTLINE, regex);
            _tokens.Add(TokenType.GRAMMARCOMMENTLINE);

            regex = new Regex(@"/\*([^*]+|\*[^/])+(\*/)?", RegexOptions.Compiled);
            Patterns.Add(TokenType.GRAMMARCOMMENTBLOCK, regex);
            _tokens.Add(TokenType.GRAMMARCOMMENTBLOCK);

            regex = new Regex(@"@?\""(\""\""|[^\""])*(""|\n)", RegexOptions.Compiled);
            Patterns.Add(TokenType.DIRECTIVESTRING, regex);
            _tokens.Add(TokenType.DIRECTIVESTRING);

            regex = new Regex(@"^(@TinyPG|@Parser|@Scanner|@Grammar|@ParseTree|@TextHighlighter)", RegexOptions.Compiled);
            Patterns.Add(TokenType.DIRECTIVEKEYWORD, regex);
            _tokens.Add(TokenType.DIRECTIVEKEYWORD);

            regex = new Regex(@"^(@|(%[^>])|=|"")+?", RegexOptions.Compiled);
            Patterns.Add(TokenType.DIRECTIVESYMBOL, regex);
            _tokens.Add(TokenType.DIRECTIVESYMBOL);

            regex = new Regex(@"[^%@=""]+", RegexOptions.Compiled);
            Patterns.Add(TokenType.DIRECTIVENONKEYWORD, regex);
            _tokens.Add(TokenType.DIRECTIVENONKEYWORD);

            regex = new Regex(@"<%", RegexOptions.Compiled);
            Patterns.Add(TokenType.DIRECTIVEOPEN, regex);
            _tokens.Add(TokenType.DIRECTIVEOPEN);

            regex = new Regex(@"%>", RegexOptions.Compiled);
            Patterns.Add(TokenType.DIRECTIVECLOSE, regex);
            _tokens.Add(TokenType.DIRECTIVECLOSE);

            regex = new Regex(@"[^\[\]]", RegexOptions.Compiled);
            Patterns.Add(TokenType.ATTRIBUTESYMBOL, regex);
            _tokens.Add(TokenType.ATTRIBUTESYMBOL);

            regex = new Regex(@"^(Skip|Color|IgnoreCase)", RegexOptions.Compiled);
            Patterns.Add(TokenType.ATTRIBUTEKEYWORD, regex);
            _tokens.Add(TokenType.ATTRIBUTEKEYWORD);

            regex = new Regex(@"[^\(\)\]\n\s]+", RegexOptions.Compiled);
            Patterns.Add(TokenType.ATTRIBUTENONKEYWORD, regex);
            _tokens.Add(TokenType.ATTRIBUTENONKEYWORD);

            regex = new Regex(@"\[\s*", RegexOptions.Compiled);
            Patterns.Add(TokenType.ATTRIBUTEOPEN, regex);
            _tokens.Add(TokenType.ATTRIBUTEOPEN);

            regex = new Regex(@"\s*\]\s*", RegexOptions.Compiled);
            Patterns.Add(TokenType.ATTRIBUTECLOSE, regex);
            _tokens.Add(TokenType.ATTRIBUTECLOSE);

            regex = new Regex(@"^(abstract|as|base|break|case|catch|checked|class|const|continue|decimal|default|delegate|double|do|else|enum|event|explicit|extern|false|finally|fixed|float|foreach|for|get|goto|if|implicit|interface|internal|int|in|is|lock|namespace|new|null|object|operator|out|override|params|partial|private|protected|public|readonly|ref|return|sealed|set|sizeof|stackalloc|static|struct|switch|throw|this|true|try|typeof|unchecked|unsafe|ushort|using|var|virtual|void|volatile|while)", RegexOptions.Compiled);
            Patterns.Add(TokenType.CS_KEYWORD, regex);
            _tokens.Add(TokenType.CS_KEYWORD);

            regex = new Regex(@"^(AddHandler|AddressOf|Alias|AndAlso|And|Ansi|Assembly|As|Auto|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|CBool|CByte|CChar|CDate|CDec|CDbl|Char|CInt|Class|CLng|CObj|Const|CShort|CSng|CStr|CType|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Double|Do|Each|ElseIf|Else|End|Enum|Erase|Error|Event|Exit|False|Finally|For|Friend|Function|GetType|Get|GoSub|GoTo|Handles|If|Implements|Imports|Inherits|Integer|Interface|In|Is|Let|Lib|Like|Long|Loop|Me|Mod|Module|MustInherit|MustOverride|MyBase|MyClass|Namespace|New|Next|Nothing|NotInheritable|NotOverridable|Not|Object|On|Optional|Option|OrElse|Or|Overloads|Overridable|Overrides|ParamArray|Preserve|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|REM|RemoveHandler|Resume|Return|Select|Set|Shadows|Shared|Short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|True|Try|TypeOf|Unicode|Until|Variant|When|While|With|WithEvents|WriteOnly|Xor|Source)", RegexOptions.Compiled);
            Patterns.Add(TokenType.VB_KEYWORD, regex);
            _tokens.Add(TokenType.VB_KEYWORD);

            regex = new Regex(@"^(abstract|as|base|break|case|catch|checked|class|const|continue|decimal|default|delegate|double|do|else|enum|event|explicit|extern|false|finally|fixed|float|foreach|for|get|goto|if|implicit|interface|internal|int|in|is|lock|namespace|new|null|object|operator|out|override|params|partial|private|protected|public|readonly|ref|return|sealed|set|sizeof|stackalloc|static|struct|switch|throw|this|true|try|typeof|unchecked|unsafe|ushort|using|var|virtual|void|volatile|while)", RegexOptions.Compiled);
            Patterns.Add(TokenType.DOTNET_KEYWORD, regex);
            _tokens.Add(TokenType.DOTNET_KEYWORD);

            regex = new Regex(@"^(Array|AttributeTargets|AttributeUsageAttribute|Attribute|BitConverter|Boolean|Buffer|Byte|Char|CharEnumerator|CLSCompliantAttribute|ConsoleColor|ConsoleKey|ConsoleKeyInfo|ConsoleModifiers|ConsoleSpecialKey|Console|ContextBoundObject|ContextStaticAttribute|Converter|Convert|DateTimeKind|DateTimeOffset|DateTime|DayOfWeek|DBNull|Decimal|Delegate|Double|Enum|Environment.SpecialFolder|EnvironmentVariableTarget|Environment|EventArgs|EventHandler|Exception|FlagsAttribute|GCCollectionMode|GC|Guid|ICloneable|IComparable|IConvertible|ICustomFormatter|IDisposable|IEquatable|IFormatProvider|IFormattable|IndexOutOfRangeException|InsufficientMemoryException|Int16|Int32|Int64|IntPtr|InvalidCastException|InvalidOperationException|InvalidProgramException|MarshalByRefObject|Math|MidpointRounding|NotFiniteNumberException|NotImplementedException|NotSupportedException|Nullable|NullReferenceException|ObjectDisposedException|Object|ObsoleteAttribute|OperatingSystem|OutOfMemoryException|OverflowException|ParamArrayAttribute|PlatformID|PlatformNotSupportedException|Predicate|Random|SByte|SerializableAttribute|Single|StackOverflowException|StringComparer|StringComparison|StringSplitOptions|String|SystemException|TimeSpan|TimeZone|TypeCode|TypedReference|TypeInitializationException|Type|UInt16|UInt32|UInt64|UIntPtr|UnauthorizedAccessException|UnhandledExceptionEventArgs|UnhandledExceptionEventHandler|ValueType|Void|WeakReference|Comparer|Dictionary|EqualityComparer|ICollection|IComparer|IDictionary|IEnumerable|IEnumerator|IEqualityComparer|IList|KeyNotFoundException|KeyValuePair|List|ASCIIEncoding|Decoder|DecoderExceptionFallback|DecoderExceptionFallbackBuffer|DecoderFallback|DecoderFallbackBuffer|DecoderFallbackException|DecoderReplacementFallback|DecoderReplacementFallbackBuffer|EncoderExceptionFallback|EncoderExceptionFallbackBuffer|EncoderFallback|EncoderFallbackBuffer|EncoderFallbackException|EncoderReplacementFallback|EncoderReplacementFallbackBuffer|Encoder|EncodingInfo|Encoding|NormalizationForm|StringBuilder|UnicodeEncoding|UTF32Encoding|UTF7Encoding|UTF8Encoding)", RegexOptions.Compiled);
            Patterns.Add(TokenType.DOTNET_TYPES, regex);
            _tokens.Add(TokenType.DOTNET_TYPES);

            regex = new Regex(@"//[^\n]*\n?", RegexOptions.Compiled);
            Patterns.Add(TokenType.CS_COMMENTLINE, regex);
            _tokens.Add(TokenType.CS_COMMENTLINE);

            regex = new Regex(@"/\*([^*]+|\*[^/])+(\*/)?", RegexOptions.Compiled);
            Patterns.Add(TokenType.CS_COMMENTBLOCK, regex);
            _tokens.Add(TokenType.CS_COMMENTBLOCK);

            regex = new Regex(@"[^}]", RegexOptions.Compiled);
            Patterns.Add(TokenType.CS_SYMBOL, regex);
            _tokens.Add(TokenType.CS_SYMBOL);

            regex = new Regex(@"([^""\n\s/;.}\(\)\[\]]|/[^/*]|}[^;])+", RegexOptions.Compiled);
            Patterns.Add(TokenType.CS_NONKEYWORD, regex);
            _tokens.Add(TokenType.CS_NONKEYWORD);

            regex = new Regex(@"@?[""]([""][""]|[^\""\n])*[""]?", RegexOptions.Compiled);
            Patterns.Add(TokenType.CS_STRING, regex);
            _tokens.Add(TokenType.CS_STRING);

            regex = new Regex(@"'[^\n]*\n?", RegexOptions.Compiled);
            Patterns.Add(TokenType.VB_COMMENTLINE, regex);
            _tokens.Add(TokenType.VB_COMMENTLINE);

            regex = new Regex(@"REM[^\n]*\n?", RegexOptions.Compiled);
            Patterns.Add(TokenType.VB_COMMENTBLOCK, regex);
            _tokens.Add(TokenType.VB_COMMENTBLOCK);

            regex = new Regex(@"[^}]", RegexOptions.Compiled);
            Patterns.Add(TokenType.VB_SYMBOL, regex);
            _tokens.Add(TokenType.VB_SYMBOL);

            regex = new Regex(@"([^""\n\s/;.}\(\)\[\]]|/[^/*]|}[^;])+", RegexOptions.Compiled);
            Patterns.Add(TokenType.VB_NONKEYWORD, regex);
            _tokens.Add(TokenType.VB_NONKEYWORD);

            regex = new Regex(@"@?[""]([""][""]|[^\""\n])*[""]?", RegexOptions.Compiled);
            Patterns.Add(TokenType.VB_STRING, regex);
            _tokens.Add(TokenType.VB_STRING);

            regex = new Regex(@"//[^\n]*\n?", RegexOptions.Compiled);
            Patterns.Add(TokenType.DOTNET_COMMENTLINE, regex);
            _tokens.Add(TokenType.DOTNET_COMMENTLINE);

            regex = new Regex(@"/\*([^*]+|\*[^/])+(\*/)?", RegexOptions.Compiled);
            Patterns.Add(TokenType.DOTNET_COMMENTBLOCK, regex);
            _tokens.Add(TokenType.DOTNET_COMMENTBLOCK);

            regex = new Regex(@"[^}]", RegexOptions.Compiled);
            Patterns.Add(TokenType.DOTNET_SYMBOL, regex);
            _tokens.Add(TokenType.DOTNET_SYMBOL);

            regex = new Regex(@"([^""\n\s/;.}\[\]\(\)]|/[^/*]|}[^;])+", RegexOptions.Compiled);
            Patterns.Add(TokenType.DOTNET_NONKEYWORD, regex);
            _tokens.Add(TokenType.DOTNET_NONKEYWORD);

            regex = new Regex(@"@?[""]([""][""]|[^\""\n])*[""]?", RegexOptions.Compiled);
            Patterns.Add(TokenType.DOTNET_STRING, regex);
            _tokens.Add(TokenType.DOTNET_STRING);

            regex = new Regex(@"\{", RegexOptions.Compiled);
            Patterns.Add(TokenType.CODEBLOCKOPEN, regex);
            _tokens.Add(TokenType.CODEBLOCKOPEN);

            regex = new Regex(@"\};", RegexOptions.Compiled);
            Patterns.Add(TokenType.CODEBLOCKCLOSE, regex);
            _tokens.Add(TokenType.CODEBLOCKCLOSE);

            regex = new Regex(@"(Start)", RegexOptions.Compiled);
            Patterns.Add(TokenType.GRAMMARKEYWORD, regex);
            _tokens.Add(TokenType.GRAMMARKEYWORD);

            regex = new Regex(@"->", RegexOptions.Compiled);
            Patterns.Add(TokenType.GRAMMARARROW, regex);
            _tokens.Add(TokenType.GRAMMARARROW);

            regex = new Regex(@"[^{}\[\]/<>]|[</]$", RegexOptions.Compiled);
            Patterns.Add(TokenType.GRAMMARSYMBOL, regex);
            _tokens.Add(TokenType.GRAMMARSYMBOL);

            regex = new Regex(@"([^;""\[\n\s/<{\(\)]|/[^/*]|<[^%])+", RegexOptions.Compiled);
            Patterns.Add(TokenType.GRAMMARNONKEYWORD, regex);
            _tokens.Add(TokenType.GRAMMARNONKEYWORD);

            regex = new Regex(@"@?[""]([""][""]|[^\""\n])*[""]?", RegexOptions.Compiled);
            Patterns.Add(TokenType.GRAMMARSTRING, regex);
            _tokens.Add(TokenType.GRAMMARSTRING);


        }

        public void Init(string input, string fileName = "")
        {
            Input = input;
            StartPos = 0;
            EndPos = 0;
            CurrentFile = fileName;
            CurrentLine = 1;
            CurrentColumn = 1;
            CurrentPosition = 0;
            _lookAheadToken = null;
        }

        public Token GetToken(TokenType type) => new Token(StartPos, EndPos) { Type = type };

        /// <summary>
        /// executes a lookahead of the next token
        /// and will advance the scan on the input string
        /// </summary>
        /// <returns></returns>
        public Token Scan(params TokenType[] expectedTokens)
        {
            var tok = LookAhead(expectedTokens); // temporarily retrieve the lookahead
            _lookAheadToken = null; // reset lookahead token, so scanning will continue
            StartPos = tok.EndPos;
            EndPos = tok.EndPos; // set the tokenizer to the new scan position
            CurrentLine = tok.Line + (tok.Text.Length - tok.Text.Replace("\n", "").Length);
            CurrentFile = tok.File;
            return tok;
        }

        /// <summary>
        /// returns token with longest best match
        /// </summary>
        /// <returns></returns>
        public Token LookAhead(params TokenType[] expectedTokens)
        {
            var startPos = StartPos;
            var endPos = EndPos;
            var currentLine = CurrentLine;
            var currentFile = CurrentFile;
            Token tok;
            List<TokenType> scanTokens;

            // this prevents double scanning and matching
            // increased performance
            if (_lookAheadToken != null
                && _lookAheadToken.Type != TokenType._UNDETERMINED_
                && _lookAheadToken.Type != TokenType._NONE_)
            {
                return _lookAheadToken;
            }

            // if no ScanTokens specified, then scan for all of them (= backward compatible)
            if (expectedTokens.Length == 0)
            {
                scanTokens = _tokens;
            }
            else
            {
                scanTokens = new List<TokenType>(expectedTokens);
                scanTokens.AddRange(_skipList);
            }

            do
            {
                var len = -1;
                var index = (TokenType)int.MaxValue;
                var input = Input.Substring(startPos);

                tok = new Token(startPos, endPos);

                int i;
                for (i = 0; i < scanTokens.Count; i++)
                {
                    var r = Patterns[scanTokens[i]];
                    var m = r.Match(input);
                    if (m.Success && m.Index == 0 && ((m.Length > len) || (scanTokens[i] < index && m.Length == len )))
                    {
                        len = m.Length;
                        index = scanTokens[i];
                    }
                }

                if (index >= 0 && len >= 0)
                {
                    tok.EndPos = startPos + len;
                    tok.Text = Input.Substring(tok.StartPos, len);
                    tok.Type = index;
                }
                else if (tok.StartPos == tok.EndPos)
                {
                    tok.Text = tok.StartPos < Input.Length ? Input.Substring(tok.StartPos, 1) : "EOF";
                }

                // Update the line and column count for error reporting.
                tok.File = currentFile;
                tok.Line = currentLine;
                if (tok.StartPos < Input.Length)
                {
                    tok.Column = tok.StartPos - Input.LastIndexOf('\n', tok.StartPos);
                }

                if (_skipList.Contains(tok.Type))
                {
                    startPos = tok.EndPos;
                    endPos = tok.EndPos;
                    currentLine = tok.Line + (tok.Text.Length - tok.Text.Replace("\n", "").Length);
                    currentFile = tok.File;
                    Skipped.Add(tok);
                }
                else
                {
                    // only assign to non-skipped tokens
                    tok.Skipped = Skipped; // assign prior skips to this token
                    Skipped = new List<Token>(); //reset skips
                }
            }
            while (_skipList.Contains(tok.Type));

            _lookAheadToken = tok;
            return tok;
        }
    }

    #endregion

    #region Token

    public enum TokenType
    {

            //Non terminal tokens:
            _NONE_  = 0,
            _UNDETERMINED_= 1,

            //Non terminal tokens:
            Start   = 2,
            CommentBlock= 3,
            DirectiveBlock= 4,
            GrammarBlock= 5,
            AttributeBlock= 6,
            CodeBlock= 7,

            //Terminal tokens:
            WHITESPACE= 8,
            EOF     = 9,
            GRAMMARCOMMENTLINE= 10,
            GRAMMARCOMMENTBLOCK= 11,
            DIRECTIVESTRING= 12,
            DIRECTIVEKEYWORD= 13,
            DIRECTIVESYMBOL= 14,
            DIRECTIVENONKEYWORD= 15,
            DIRECTIVEOPEN= 16,
            DIRECTIVECLOSE= 17,
            ATTRIBUTESYMBOL= 18,
            ATTRIBUTEKEYWORD= 19,
            ATTRIBUTENONKEYWORD= 20,
            ATTRIBUTEOPEN= 21,
            ATTRIBUTECLOSE= 22,
            CS_KEYWORD= 23,
            VB_KEYWORD= 24,
            DOTNET_KEYWORD= 25,
            DOTNET_TYPES= 26,
            CS_COMMENTLINE= 27,
            CS_COMMENTBLOCK= 28,
            CS_SYMBOL= 29,
            CS_NONKEYWORD= 30,
            CS_STRING= 31,
            VB_COMMENTLINE= 32,
            VB_COMMENTBLOCK= 33,
            VB_SYMBOL= 34,
            VB_NONKEYWORD= 35,
            VB_STRING= 36,
            DOTNET_COMMENTLINE= 37,
            DOTNET_COMMENTBLOCK= 38,
            DOTNET_SYMBOL= 39,
            DOTNET_NONKEYWORD= 40,
            DOTNET_STRING= 41,
            CODEBLOCKOPEN= 42,
            CODEBLOCKCLOSE= 43,
            GRAMMARKEYWORD= 44,
            GRAMMARARROW= 45,
            GRAMMARSYMBOL= 46,
            GRAMMARNONKEYWORD= 47,
            GRAMMARSTRING= 48
    }

    public class Token
    {

        public string File { get; set; }

        public int Line { get; set; }

        public int Column { get; set; }

        public int StartPos { get; set; }

        public int Length => EndPos - StartPos;

        public int EndPos { get; set; }

        public string Text { get; set; }

        /// <summary>
        /// Contains all prior skipped symbols
        /// </summary>
        public List<Token> Skipped { get; set; }

        public object Value { get; set; }

        [XmlAttribute]
        public TokenType Type;

        public Token()
            : this(0, 0)
        {
        }

        public Token(int start, int end)
        {
            Type = TokenType._UNDETERMINED_;
            StartPos = start;
            EndPos = end;
            Text = ""; // must initialize with empty string, may cause null reference exceptions otherwise
            Value = null;
        }

        public void UpdateRange(Token token)
        {
            if (token.StartPos < StartPos)
            {
                StartPos = token.StartPos;
            }

            if (token.EndPos > EndPos)
            {
                EndPos = token.EndPos;
            }
        }

        public override string ToString() => Text != null ? $"{Type} '{Text}'" : Type.ToString();
    }

    #endregion
}
