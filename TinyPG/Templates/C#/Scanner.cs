// <auto-generated>
// Generated by TinyPG v1.4
// </auto-generated>

using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Xml.Serialization;

namespace <%Namespace%>
{
    #region Scanner

    [GeneratedCode("TinyPG", "1.4")]
    public partial class Scanner
    {
        public string Input;
        public int StartPos;
        public int EndPos;
        public string CurrentFile;
        public int CurrentLine;
        public int CurrentColumn;
        public int CurrentPosition;
        public List<Token> Skipped; // tokens that were skipped
        public Dictionary<TokenType, Regex> Patterns;

        private Token _lookAheadToken;
        private readonly List<TokenType> _tokens;
        private readonly List<TokenType> _skipList; // tokens to be skipped

        public Scanner()
        {
            Regex regex;
            Patterns = new Dictionary<TokenType, Regex>();
            _tokens = new List<TokenType>();
            _lookAheadToken = null;
            Skipped = new List<Token>();

            _skipList = new List<TokenType>();
<%SkipList%>
<%RegExps%>
        }

        public void Init(string input) => Init(input, "");

        public void Init(string input, string fileName)
        {
            Input = input;
            StartPos = 0;
            EndPos = 0;
            CurrentFile = fileName;
            CurrentLine = 1;
            CurrentColumn = 1;
            CurrentPosition = 0;
            _lookAheadToken = null;
        }

        public Token GetToken(TokenType type) => new(StartPos, EndPos) { Type = type };

        /// <summary>
        /// executes a lookahead of the next token
        /// and will advance the scan on the input string
        /// </summary>
        /// <returns></returns>
        public Token Scan(params TokenType[] expectedTokens)
        {
            var tok = LookAhead(expectedTokens); // temporarely retrieve the lookahead
            _lookAheadToken = null; // reset lookahead token, so scanning will continue
            StartPos = tok.EndPos;
            EndPos = tok.EndPos; // set the tokenizer to the new scan position
            CurrentLine = tok.Line + (tok.Text.Length - tok.Text.Replace("\n", "").Length);
            CurrentFile = tok.File;
            return tok;
        }

        /// <summary>
        /// returns token with longest best match
        /// </summary>
        /// <returns></returns>
        public Token LookAhead(params TokenType[] expectedTokens)
        {
            var startPos = StartPos;
            var endPos = EndPos;
            var currentLine = CurrentLine;
            var currentFile = CurrentFile;
            List<TokenType> scanTokens;


            // this prevents double scanning and matching
            // increased performance
            if (_lookAheadToken is { Type: not TokenType._UNDETERMINED_ and not TokenType._NONE_ })
            {
                return _lookAheadToken;
            }

            // if no scanTokens specified, then scan for all of them (= backward compatible)
            if (expectedTokens.Length == 0)
            {
                scanTokens = _tokens;
            }
            else
            {
                scanTokens = new List<TokenType>(expectedTokens);
                scanTokens.AddRange(_skipList);
            }

            Token tok;
            do
            {
                var len = -1;
                var index = (TokenType)int.MaxValue;
                var input = Input.Substring(startPos);

                tok = new Token(startPos, endPos);

                foreach (var scanToken in scanTokens)
                {
                    var regex = Patterns[scanToken];
                    var match = regex.Match(input);
                    if (match.Success && match.Index == 0 && ((match.Length > len) || (scanToken < index && match.Length == len )))
                    {
                        len = match.Length;
                        index = scanToken;
                    }
                }

                if (index >= 0 && len >= 0)
                {
                    tok.EndPos = startPos + len;
                    tok.Text = Input.Substring(tok.StartPos, len);
                    tok.Type = index;
                }
                else if (tok.StartPos == tok.EndPos)
                {
                    tok.Text = tok.StartPos < Input.Length ? Input.Substring(tok.StartPos, 1) : "EOF";
                }

                // Update the line and column count for error reporting.
                tok.File = currentFile;
                tok.Line = currentLine;

                if (tok.StartPos < Input.Length)
                {
                    tok.Column = tok.StartPos - Input.LastIndexOf('\n', tok.StartPos);
                }

                if (_skipList.Contains(tok.Type))
                {
                    startPos = tok.EndPos;
                    endPos = tok.EndPos;
                    currentLine = tok.Line + (tok.Text.Length - tok.Text.Replace("\n", "").Length);
                    currentFile = tok.File;
                    Skipped.Add(tok);
                }
                else
                {
                    // only assign to non-skipped tokens
                    tok.Skipped = Skipped; // assign prior skips to this token
                    Skipped = new List<Token>(); //reset skips
                }
            }
            while (_skipList.Contains(tok.Type));

            _lookAheadToken = tok;
            return tok;
        }
    }

    #endregion

    #region Token

    public enum TokenType
    {
<%TokenType%>
    }

    [GeneratedCode("TinyPG", "1.4")]
    public class Token<%IToken%>
    {
        public string File { get; set; }

        public int Line { get; set; }

        public int Column { get; set; }

        public int StartPos { get; set; }

        public int Length => EndPos - StartPos;

        public int EndPos { get; set; }

        public string Text { get; set; }

        /// <summary>
        /// Contains all prior skipped symbols.
        /// </summary>
        public List<Token> Skipped { get; set; }

        public object Value { get; set; }

        [XmlAttribute]
        public TokenType Type;

        public Token()
            : this(0, 0)
        {
        }

        public Token(int start, int end)
        {
            Type = TokenType._UNDETERMINED_;
            StartPos = start;
            EndPos = end;
            Text = ""; // must initialize with empty string, may cause null reference exceptions otherwise
            Value = null;
        }

        public void UpdateRange(Token token)
        {
            if (token.StartPos < StartPos)
            {
                StartPos = token.StartPos;
            }

            if (token.EndPos > EndPos)
            {
                EndPos = token.EndPos;
            }
        }

        public override string ToString() => Text != null ? $"{Type} '{Text}'" : Type.ToString();
    }

    #endregion
}
